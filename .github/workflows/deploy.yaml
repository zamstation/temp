name: Deploy Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEPLOYER_PUBSPEC: https://raw.githubusercontent.com/zamstation/dart_package_deployer/main/pubspec.yaml
  CACHE_KEY_PREFIX: dart-package-workspace

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest

    steps:
      - name: Extract Cache Key
        id: extract-cache-key
        run: |          
          cacheKey="$CACHE_KEY_PREFIX-$(curl -s $DEPLOYER_PUBSPEC | grep "version:" | cut -d":" -f2 | xargs)"
          echo "Cache Key: $cacheKey"
          echo "::set-output name=cacheKey::$cacheKey"

      - name: Extract Workspace From Cache
        id: cache-workspace
        uses: actions/cache@v2
        with:
          path: workspace
          key: ${{ steps.extract-cache-key.outputs.cacheKey }}

      - name: Create New Workspace
        if: steps.cache-workspace.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/zamstation/dart_package_deployer.git
          bash dart_package_deployer/bin/main.sh
          rm -rf dart_package_deployer

      - name: Display Workspace
        run: |
          echo "Workspace Directory:"
          ls -ltr workspace
          echo -e "\nScripts Directory:"
          ls -ltr workspace/deploy/scripts
          echo ${{ env.GITHUB_SHA }} - ${{ env.GITHUB_RUN_NUMBER }}

      - name: Export Workspace
        uses: actions/cache@v2
        with:
          path: workspace
          key: ${{ env.GITHUB_SHA }} - ${{ env.GITHUB_RUN_NUMBER }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [initialize]

    steps:
      - name: Import Workspace
        uses: actions/cache@v2
        with:
          path: workspace
          key: ${{ env.GITHUB_SHA }} - ${{ env.GITHUB_RUN_NUMBER }}

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: workspace/code

      - name: Validate Checkout
        run: |
          cd workspace/code
          ls -ltr

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [build]
    if: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $DEPLOYER_PUBSPEC)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Analyze
        run: bash .temp/analyze.sh

      - name: Validate
        run: bash .temp/validate.sh

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [validate]
    if: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $DEPLOYER_PUBSPEC)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Test
        run: bash .temp/test.sh

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [test]
    if: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $DEPLOYER_PUBSPEC)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Publish
        run: bash .temp/publish.sh
