name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CI_CD_REPO: https://raw.githubusercontent.com/zamstation/dart_package_ci_cd/main
  CACHE_KEY_FILE: cache_key.txt

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest

    steps:
      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          curl -s -o $CACHE_KEY_FILE $CI_CD_REPO/version.txt
          echo "::set-output name=cacheKey::$(cat $CACHE_KEY_FILE)"
          echo "Cache Key: $cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.cacheKey }}

      - name: Download Scripts
        if: steps.cache-scripts.outputs.cache-hit != 'true'
        run: bash <(curl -s $CI_CD_REPO/download.sh)

      # - name: Export Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: artifact
      #     path: .
      #     retention-days: 1

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $CI_CD_REPO/version.txt)
          echo "Cache Key: $cacheKey"
          echo "CI_CD_REPO: $CI_CD_REPO"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Download Scripts
        if: steps.cache-scripts.outputs.cache-hit != 'true'
        run: bash <(curl -s $CI_CD_REPO/download.sh)

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [initialize]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $CI_CD_REPO/version.txt)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Analyze
        run: bash .temp/analyze.sh

      - name: Validate
        run: bash .temp/validate.sh

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [validate]
    if: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $CI_CD_REPO/version.txt)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Test
        run: bash .temp/test.sh

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [test]
    if: "false"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Cache Key
        id: extract-cache-key
        run: |
          cacheKey=$(curl -s $CI_CD_REPO/version.txt)
          echo "Cache Key: $cacheKey"
          echo "::set-output name=CACHE_KEY::$cacheKey"

      - name: Extract Scripts From Cache
        id: cache-scripts
        uses: actions/cache@v2
        with:
          path: .temp
          key: ${{ steps.extract-cache-key.outputs.CACHE_KEY }}

      - name: Install Dart
        uses: dart-lang/setup-dart@v1

      - name: Publish
        run: bash .temp/publish.sh
